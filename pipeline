#!/bin/sh

LINENODECHAR="+"
LINECONNCHAR="-"
DATANODECHAR="|"
LEFTMARGINCHAR=" "

tbl_set_col_max(){
  export TBLCOLMAX=$1
}

tbl_get_col_max(){
  echo $TBLCOLMAX
}

tbl_set_title(){
  it=0
  for st in $*
  do
    TBLTITLE[$it]=$st
    it=`expr $it + 1`
  done
}

tbl_get_title(){
  echo ${TBLTITLE[*]}
}

tbl_set_size(){
  i=0
  for s in $*
  do
    TBLSIZE[$i]=$s
    i=`expr $i + 1`
  done
}

tbl_get_size(){
  echo ${TBLSIZE[*]}
}

tbl_set_data(){
  i=0
  for s in $*
  do
    TBLDATA[$i]=$s
    i=`expr $i + 1`
  done
}

tbl_get_data(){
  echo ${TBLDATA[*]}
}

tbl_set_left_margin(){
  TBLLEFTMARGIN=$1
}

tbl_get_left_argin(){
  echo $TBLLEFTMARGIN
}

tbl_print_left_margin(){
  imargin=0
  while [ $imargin -lt ${TBLLEFTMARGIN} ];
  do
    echo -n "${LEFTMARGINCHAR}"
    imargin=`expr $imargin + 1`
  done
}
tbl_print_title_botom(){
  ibot=0
  while [ $ibot -lt ${TBLCOLMAX} ];
  do
    if [ $ibot -eq 0 ]; then
      tbl_print_left_margin
      echo -n "${LINENODECHAR}"
    fi

    SIZEINF=${TBLSIZE[$ibot]}
    jbot=0
    while [ $jbot -lt ${SIZEINF} ];
    do
      echo -n "${LINECONNCHAR}"
      jbot=`expr $jbot + 1`
    done
    echo -n "${LINENODECHAR}"

    ibot=`expr $ibot + 1`
  done
  echo
}

tbl_print_title_content(){
  ititle=0
  while [ $ititle -lt ${TBLCOLMAX} ];
  do
    if [ $ititle -eq 0 ]; then
      tbl_print_left_margin
      echo -n "${DATANODECHAR}"
    fi

    SIZEINF=${TBLSIZE[$ititle]}
    TITLEINF=${TBLTITLE[$ititle]}

    echo -n "${TITLEINF}" |awk '{printf("%-'"${SIZEINF}"'s",$0)}'
    echo -n "${DATANODECHAR}"

    ititle=`expr $ititle + 1`
  done
  echo
}

tbl_print_title(){
  tbl_print_title_botom
  tbl_print_title_content
  tbl_print_title_botom
}

tbl_print_data_content(){
  ititle=0
  while [ $ititle -lt ${TBLCOLMAX} ];
  do
    if [ $ititle -eq 0 ]; then
      tbl_print_left_margin
      echo -n "${DATANODECHAR}"
    fi

    SIZEINF=${TBLSIZE[$ititle]}
    DATAINF=${TBLDATA[$ititle]}

    echo -n "${DATAINF}" |awk '{printf("%-'"${SIZEINF}"'s",$0)}'
    echo -n "${DATANODECHAR}"

    ititle=`expr $ititle + 1`
  done
  echo
}

tbl_print_data(){
  tbl_print_data_content
  tbl_print_title_botom
}

show_image_info(){
  image_name="$1"
  tag_name="$2"
  image_id="$3"
  size="$4"

  #print data
  tbl_set_col_max 4
  tbl_set_left_margin 1
  tbl_set_size 40 10 15 15
  tbl_set_title IMAGE TAG IMAGE_ID SIZE
  tbl_print_title

  tbl_set_data "${image_name}" "${tag_name}" "${image_id}" "${size}"
  tbl_print_data
}

show_log_info(){
  log_name="$1"

  #print data
  tbl_set_col_max 2
  tbl_set_left_margin 1
  tbl_set_size 10 70
  tbl_set_title LOG LOG_FILENAME
  tbl_print_title

  tbl_set_data "No.1" "${log_name}"
  tbl_print_data
}

TEMP_LOG_FILE=/tmp/pipeline_devops_docker.log.$$
pull_docker_image(){
  image_name="$1"
  echo "##  pipeline init : ${image_name}"
  docker pull ${image_name} >/dev/null 2>&1

  image_info=`docker images |grep ${image_name} 2>/dev/null`
  image_info_name=`echo ${image_info} |awk '{print $1}'`
  image_info_tag=`echo ${image_info} |awk '{print $2}'`
  image_info_id=`echo ${image_info} |awk '{print $3}'`
  image_info_size=`echo ${image_info} |awk '{print $7 $8}'`

  show_image_info ${image_info_name} ${image_info_tag} ${image_info_id} ${image_info_size}
  echo
}

usage(){
  echo "Usage: $0 init|up|status|stop [capability]"
  echo "       capablity: jenkins|mongodb|mariadb"
  echo "                  sonarqube|gitlab|wekan"
  echo "                  jira|artifactory|hygieia"
  echo "                  all(default)"
}

action="$1"
capa="$2"

if [ $# -lt 1 ]; then
  usage
  exit 1
fi

date
if [ _"init" = _"${action}" ]; then
  echo "##  pipeline init will pull latest images from devopsopen of dockhub"
  for image in ci-jenkins cq-sonarqube pipeline-portal scm-artifactory scm-gitlab
  do
    pull_docker_image devopsopen/docker-${image}
  done
elif [ _"up" = _"${action}" ]; then
  echo "##  pipeline up will create services"
  for cap in gitlab jenkins sonarqube portal
  do
    echo "#   start service: ${cap}"
    kubectl create -f ${cap}-pod.yaml
    kubectl create -f ${cap}-service.yaml
    sleep 1
  done
elif [ _"status" = _"${action}" ]; then
  kubectl get services
elif [ _"stop" = _"${action}" ]; then
  echo "##  pipeline stop will stop services"
  for cap in gitlab jenkins sonarqube portal
  do
    echo "#   stop service: ${cap}"
    kubectl delete -f ${cap}-pod.yaml
    kubectl delete -f ${cap}-service.yaml
    sleep 1
  done
fi

date
